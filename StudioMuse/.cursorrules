expertise:
  - Python 3
  - GIMP 3.0 Plugin Development
  - GEGL (Generic Graphics Library)
  - GTK 3
  - Pydantic
  - RESTful APIs
  - JSON Handling

code_guidelines:
  incremental_updates:
    description: >
      Focus on small, manageable code changes. Avoid large refactorings; instead, break them into smaller, testable pieces.
  dry_principle:
    description: >
      Ensure code is concise and avoids redundancy by adhering to the "Don't Repeat Yourself" principle.
  coding_standards:
    naming_conventions:
      classes: PascalCase
      functions: snake_case
      variables: snake_case
    file_structure:
      - StudioMuse/
        - backend/
          - api.py
        - docs/
          - backedRefactor.md
          - errorLog.txt
          - llmRefactor.md
          - refactor.md
          - tree.txt
        - plugins/
          - install.py
          - install.sh
          - colorBitMagic/
            - __init__.py
            - colorBitMagic.py
            - colorBitMagic_ui.py
            - colorBitMagic_utils.py
            - assets/
              - wizardLogo.webp
              - WizardSecond.png
            - dialogs/
              - __init__.py
              - add_palette_dialog.py
              - base_dialog.py
              - demystifyer_dialog.py
              - dialog_manager.py
              - home_dialog.py
            - llm/
              - __init__.py
              - base_llm.py
              - gemini_llm.py
              - LLMPhysicalPalette.py
              - llm_service_provider.py
              - PaletteDemistifyerLLM.py
              - perplexity_llm.py
              - prompts.py
            - physical_palettes/
              - Mont Marte Extra Soft Oil Pastels Vibrant Hues Premium 52pc.json
            - templates/
              - addPalette.xml
              - dmMain.xml
              - homeDialog.xml
            - testing/
              - testing.ipynb
            - utils/
              - __init__.py
              - palette_models.py
              - palette_processor.py
  documentation:
    docstrings: >
      Use Python's standard docstring conventions for all modules, classes, and functions.
    comments: >
      Provide clear and concise comments to explain complex logic or decisions.

plugin_development:
  gimp_version: "3.0"
  plugin_type: "Python-Fu"
  api_documentation: "https://developer.gimp.org/api/3.0/"
  testing:
    description: >
      Test plugins incrementally within GIMP to ensure stability and functionality.
    methods:
      - Unit Testing
      - Integration Testing
  dependencies:
    - name: "GIMP 3.0"
      url: "https://www.gimp.org/downloads/devel/"
    - name: "Python 3.8+"
      url: "https://www.python.org/downloads/"
    - name: "GTK 3"
      url: "https://www.gtk.org/"
    - name: "Pydantic"
      url: "https://pydantic-docs.helpmanual.io/"
    - name: "Requests"
      url: "https://docs.python-requests.org/en/latest/"

communication:
  clarify_unknowns:
    description: >
      If uncertain about any aspect of GIMP's API or plugin development, consult the latest GIMP documentation or request specific information.
  documentation_retrieval:
    description: >
      Always refer to the most recent GIMP 3.0 plugin development documentation. If unavailable, seek guidance to obtain the necessary information.

best_practices:
  code_modularity:
    description: >
      Structure code into distinct modules to enhance readability and maintainability.
  error_handling:
    description: >
      Implement robust error handling to ensure the plugin's stability during unexpected scenarios.
  performance_optimization:
    description: >
      Optimize code for performance, especially when processing large images or complex operations.
